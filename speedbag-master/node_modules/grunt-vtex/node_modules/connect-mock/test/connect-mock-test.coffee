###
Module dependencies.
###
should = require 'should'
fs = require 'fs'
mock = require '../libs/connect-mock'

describe 'Mock', ->
	it 'should respond with file when file is present', (done) ->
		# Arrange
		middleware = mock( verbose: true, mockDirectory: 'mock/' )
		req = url: 'api/orders/408470798068-01'
		res = end: (data) ->
			# Assert
			data.should.equal "foo"
			done()

		# Act and Assert
		middleware(req, res, ->)

	it 'should respond with file when url is folder but file of same name is present', (done) ->
		# Arrange
		middleware = mock( verbose: true, mockDirectory: 'mock/' )
		req = url: 'api/orders'
		res = end: (data) ->
			# Assert
			data.should.equal "bar"
			done()
		middleware(req, res, ->)

	it 'should respond with file when url is folder ending in slash but file of same name is present', (done) ->
		# Arrange
		middleware = mock( verbose: true, mockDirectory: 'mock/' )
		req = url: 'api/orders/'
		res = end: (data) ->
			# Assert
			data.should.equal "bar"
			done()

		# Act and Assert
		middleware(req, res, ->)

	it 'should respond with file when url is file inside folder of same name', (done) ->
		# Arrange
		middleware = mock( verbose: true, mockDirectory: 'mock/' )
		req = url: 'api/orders/orders'
		res = end: (data) ->
			# Assert
			data.should.equal "bar"
			done()

		# Act and Assert
		middleware(req, res, ->)

	it 'should call next if file is not present', (done) ->
		# Arrange
		middleware = mock( verbose: true, mockDirectory: 'mock/' )
		req = url: 'api/test'

		# Act and Assert
		middleware(req, undefined, done)